kotlin---------------------------------------------------------------------------------------------
private val titleList = arrayListOf("Overview", "val and var", "User Input", "String", "Data Types",
        "If Statements", "Try/Catch", "For Loops & While Loops", "When")

    private val infoList = arrayListOf("What is Kotlin", "How declare variables?", "Read From User",
    "Concatenation and Interpolation (Templates)", "Integers, Floats, Strings, and Booleans", "Control Your App",
    "make sure that your program does not crash ", "Repeat You Code", "When blocks are similar to a series of if statements")

    private val explainings = arrayListOf(
        "Kotlin is an open-source statically typed programming language developed by JetBrains.\n" +
            "Kotlin runs on the Java Virtual Machine and requires a Java Development Kit.\n" +
            "Kotlin code can easily call Java code, and vice versa\n" +
            "The use cases of Kotlin:\n" +
            "•\tAndroid\n" +
            "•\tweb development\n" +
            "•\tserver-side development\n" +
            "•\tdesktop development\n",
        "val keyword are immutable\n" +
            "var keyword are mutable and can be changed anytime.\n" +
            "val limit = 3\n" +
            "var i = 0\n",
        "Create a variable that holds the input, then get the user input with readLine()\n" +
            "var country = readLine()\n",
    "String concatenation refers to combining strings (or other data types) with the use of a + sign\n" +
            "println(key + \", its capital is \" + value)\n" +
            "String Interpolation, allows us to inject variables into a string\n" +
            "println(\"\$key, its capital is \$value\")\n",
    "Converting Floats to Integers can lead to data loss.\n" +
            "We have to use two exclamation marks after readLine() to tell Kotlin that the user will definitely enter something. This can be dangerous and cause a crash if the user does not enter a number,\n" +
            "var country = readLine()!!\n",
    "val num = readLine()!!.toInt()\n" +
            "if(num > 5){\n" +
            "    println(\"The number is larger than 5\")\n" +
            "}\n" +
            "\n" +
            "We can use multipul if statements\n" +
            "val num = readLine()!!.toInt()\n" +
            "if(num < 5){\n" +
            "    println(\"The number is smaller than 5\")\n" +
            "}\n" +
            "if(num == 5){\n" +
            "    println(\"The number is 5\")\n" +
            "}\n" +
            "if(num > 5){\n" +
            "    println(\"The number is larger than 5\")\n" +
            "}\n" +
            "\n" +
            "Here if else \n" +
            "val num = readLine()!!.toInt()\n" +
            "if(num < 5){\n" +
            "    println(\"The number is smaller than 5\")\n" +
            "}else if(num == 5){\n" +
            "    println(\"The number is 5\")\n" +
            "}else{\n" +
            "    println(\"The number is larger than 5\")\n" +
            "}   \n",
    "Let's see how we can make sure that our program does not crash even if the user does not follow our directions.\n" +
            "val num = 10\n" +
            "print(\"Enter a number: \")\n" +
            "try {\n" +
            "    val userNum = readLine()!!.toInt()\n" +
            "    val sum = num + userNum\n" +
            "    println(sum)\n" +
            "} catch (e: Exception) {\n" +
            "    println(\"Please enter numbers only\")\n" +
            "}                \n",
    "Very often we need something to happen multiple times. Instead of typing the same thing over and over again, we can use loops.\n" +
            "for(number in 1..5){\n" +
            "    println(number)\n" +
            "}  \n" +
            "While loops are very similar to For Loops. They can perform the same actions.\n" +
            "var count = 0\n" +
            "while (count < 5){\n" +
            "    count ++\n" +
            "    println(count)\n" +
            "}  \n",
    "When blocks are similar to a series of if statements. They allow us to perform a check in a more concise way and handle each condition appropriately.\n" +
            "val grade = readLine()!!.toInt()\n" +
            "when {\n" +
            "    grade < 60 -> println(\"F\")\n" +
            "    grade < 70 -> println(\"D\")\n" +
            "    grade < 80 -> println(\"C\")\n" +
            "    grade < 90 -> println(\"B\")\n" +
            "    else -> println(\"A\")\n" +
            "}    \n")

android=-------------------------------------------------------------------------------------------
    private val titleList = arrayListOf("New Project", "onCreate", "activity_main.xml", "console", "lateinit","Resource Files")
    private val infoList = arrayListOf("How To Create New Project", "What is onCreate Method?",
        "Design Our App", "print information on console", "Initializing UI Elements", "Here, we have the colors.xml and themes.xml files")
    private val explainings = arrayListOf(
        "After installation android studio and open it, click “new project” then select “empty activity” then type name of app and leave package name it is like unique ID for the project, then select programming language here we select Kotlin, then click finish\n" +
                "\n" +
                "It will open window has two sections:\n" +
                "1-\tLeft side = project structure\n" +
                "2-\tRight side = MainActivity, this is kotlin file serves as an entry point to our application.\n",
        "\"onCreate\" method, which is the starting point of our application.  When our application starts, the code between the two curly brackets executes. \n" +
                "override fun onCreate(savedInstanceState: Bundle?) {\n" +
                "    super.onCreate(savedInstanceState)\n" +
                "    setContentView(R.layout.activity_main)\n" +
                "}\n",
    "activity_main.xml reveals a visual representation of our application.\n" +
            "We can use the tools provided to drag and drop various UI elements and control their functionality.\n" +
            "The two views we see are the \"Design View\" and the \"Blueprint View\"\n" +
            "The main difference between the two views is that the \"Blueprint View\" keeps track of invisible items that do not appear on the \"Design View\"  \n" +
            "XML is a markup language similar to HTML.  Android Studio uses it to create and modify UI elements.\n" +
            "\n" +
            "<TextView\n" +
            "android:layout_width=\"wrap_content\"\n" +
            "android:layout_height=\"wrap_content\"\n" +
            "android:text=\"Hello World!\"\n" +
            "app:layout_constraintbottom_tobottomof=\"parent\"\n" +
            "app:layout_constraintleft_toleftof=\"parent\"\n" +
            "app:layout_constraintright_torightof=\"parent\"\n" +
            "app:layout_constrainttop_totopof=\"parent\"/>\n",
    "we can use the console to print information while we develop our app. Anything that prints to the console will be invisible to the end-user.\n" +
            "We can go to Logcat to see what we print on console\n" +
            "print(\"see console\")\n" +
            "Log.d(\"[file name] MainActivity\", \"[message] see\")\n",
    "lateinit var btnNumberGame: Button\n" +
            "we use “latainit” to tell Kotlin we will initialize that variable and for able use that variable out onCreate method\n",
    "Here, we have the colors.xml and themes.xml files. Making changes to these files allows us to set a base color for every UI Element (more on those later) we create. These UI Elements can then be changed individually\n" +
            "Each color uses a Hex Color Code.\n" +
            "It is important to keep in mind that the color names in the base file are used across the app. If you choose to make changes to the names of these colors, you should use the 'refractor' tool.\n")